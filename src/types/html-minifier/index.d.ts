declare namespace htmlMinifier {
  export interface Options {
    /**
     * Treat attributes in case sensitive manner (useful for custom HTML tags)
     *
     * @default false
     */
    caseSensative?: boolean;

    /**
     * Omit attribute values from boolean attributes
     *
     * @default false
     */
    collapseBooleanAttributes?: boolean;

    /**
     * Don't leave any spaces between display:inline; elements when collapsing.
     * Must be used in conjunction with collapseWhitespace=true
     *
     * @default false
     */
    collapseInlineTagWhitespace?: boolean;

    /**
     * Collapse white space that contributes to text nodes in a document tree
     *
     * @default false
     */
    collapseWhitespace?: boolean;

    /**
     * Always collapse to 1 space (never remove it entirely). Must be used in
     * conjunction with collapseWhitespace=true
     *
     * @default false
     */
    conservativeCollapse?: boolean;

    /**
     * Handle parse errors instead of aborting.
     *
     * @default false
     */
    continueOnParseError?: boolean;

    /**
     * Arrays of regex'es that allow to support custom attribute assign
     * expressions (e.g. '<div flex?="{{mode != cover}}"></div>')
     */
    customAttrAssign?: RegExp[];

    /**
     * Regex that specifies custom attribute to strip newlines from (e.g. /ng-class/)
     */
    customAttrCollapse?: RegExp;

    /**
     * Arrays of regex'es that allow to support custom attribute surround
     * expressions (e.g. <input {{#if value}}checked="checked"{{/if}}
     */
    customAttrSurround?: RegExp[];

    /**
     * Arrays of regex'es that allow to support custom event attributes for
     * minifyJS (e.g. ng-click)
     */
    customEventAttributes?: RegExp[];

    /**
     * Use direct Unicode characters whenever possible
     *
     * @default false
     */
    decodeEntities?: boolean;

    /**
     * Parse input according to HTML5 specifications
     *
     * @default true
     */
    html5?: boolean;

    /**
     * Array of regex'es that allow to ignore certain fragments, when matched
     * (e.g. <?php ... ?>, {{ ... }}, etc.
     */
    ignoreCustomComments?: RegExp[];

    /**
     * Array of regex'es that allow to ignore certain fragments, when matched
     * (e.g. <?php ... ?>, {{ ... }}, etc.)
     */
    ignoreCustomFragments?: RegExp[];

    /**
     * Insert tags generated by HTML parser
     *
     * @default true
     */
    includeAutoGeneratedTags?: boolean;

    /**
     * Keep the trailing slash on singleton elements
     *
     * @default false
     */
    keepClosingSlash?: boolean;

    /**
     * Specify a maximum line length. Compressed output will be split by
     * newlines at valid HTML split-points
     */
    maxLineLength?: number;

    /**
     * Minify CSS in style eleements and style attributes (uses clean-css)
     *
     * @default false
     */
    minifyCSS?: boolean | string | object;

    /**
     * Minify JavaScript in script elements and event attributes (uses UglifyJS)
     *
     * @default false
     */
    minifyJS?: boolean | string | object;

    /**
     * Minify URLs in various attributes (uses relateurl)
     *
     * @default false;
     */
    minifyURLs?: boolean | string | object;

    /**
     * Always collapse to 1 line break (never remove it entirely) when
     * whitespace between tags include a line break. Must be used in conjunction
     * with collapseWhitespace=true
     *
     * @default false
     */
    preserveLineBreaks?: boolean;

    /**
     * Prevents the escaping of the values of attributes
     *
     * @default false
     */
    preventAttributesEscaping?: boolean;

    /**
     * Process contents of conditional comments through minifier
     *
     * @default false
     */
    processConditionalComments?: boolean;

    /**
     * Array of strings corresponding to types of script elements to process
     * through minifier (e.g. text/ng-template, text/x-handlebars-template, etc.)
     */
    processScripts?: string[];

    /**
     * Type of quote to use for attribute values (' or ")
     */
    quoteCharacter?: "'" | '"';

    /**
     * Remove quotes around attributes when possible
     *
     * @default false
     */
    removeAttributeQuotes?: boolean;

    /**
     * Strip HTML comments
     *
     * @default false
     */
    removeComments?: boolean;

    /**
     * Remove all attributes with whitespace-only values
     *
     * @default false
     */
    removeEmptyAttributes?: boolean | Function;

    /**
     * Remove all elements with empty content
     *
     * @default false
     */
    removeEmptyElements?: boolean;

    /**
     * Remove optional tags
     *
     * @default false
     */
    removeOptionalTags?: boolean;

    /**
     * @default false
     */
    removeRedundantAttributes?: boolean;

    /**
     * @default false
     */
    removeScriptTypeAttributes?: boolean;

    /**
     * @default false
     */
    removeStyleLinkTypeAttributes?: boolean;

    /**
     * @default false
     */
    removeTagWhitespace?: boolean;

    /**
     * @default false
     */
    sortAttributes?: boolean;

    /**
     * @default false
     */
    sortClassName?: boolean;

    /**
     * @default false
     */
    trimCustomFragments?: boolean;

    /**
     * @default false
     */
    useShortDoctype?: boolean;
  }
}

declare module 'html-minifier' {
  /**
   * Minify HTML
   *
   * @param htmlString string of HTML to minify
   * @param options Minifier options (optional)
   */
  export function minify(
    htmlString: string,
    options?: htmlMinifier.Options
  ): string;
}
